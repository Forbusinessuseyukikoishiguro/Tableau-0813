# 新人エンジニア必見！Tableau運用設計書・要件定義書・メンテナンス用シート完全ガイド

## はじめに：なぜ運用設計書が重要なのか？

Tableauでダッシュボードを作るのは楽しいですが、**「作って終わり」では意味がありません**。本当の価値は継続的に運用され、ビジネスに貢献し続けることにあります。しかし、多くのプロジェクトが運用フェーズで躓いてしまうのが現実です。

### 運用設計書なしで起こる典型的な問題

**技術的な問題**
- データ更新の失敗で古い情報が表示される
- パフォーマンス劣化でユーザーが離れる
- セキュリティホールが放置される

**組織的な問題**
- 責任者が不明でメンテナンスが停止
- ユーザーサポートの体制不備
- 改善要望の優先順位が不明

**ビジネス的な問題**
- ROIが測定できない
- 意思決定プロセスに活用されない
- 投資対効果が疑問視される

**この記事で解決できること：**
新人エンジニアでも作成できる実践的な運用設計書、要件定義書、メンテナンス用シートのテンプレートと作成方法を提供します。

---

## 第1章：Tableau運用設計の全体像

### 1.1 運用設計で定義すべき5つの領域

**1. システム運用（Technical Operations）**
- インフラ・サーバー管理
- データ更新・同期管理
- パフォーマンス監視
- セキュリティ管理

**2. データ管理（Data Management）**
- データソース管理
- データ品質管理
- マスターデータ管理
- データガバナンス

**3. コンテンツ管理（Content Management）**
- ダッシュボード管理
- バージョン管理
- アクセス権限管理
- コンテンツライフサイクル

**4. ユーザーサポート（User Support）**
- ヘルプデスク運用
- ユーザートレーニング
- 問い合わせ対応
- FAQ管理

**5. 改善・拡張（Enhancement & Expansion）**
- パフォーマンス改善
- 機能追加要望対応
- ユーザビリティ向上
- システム拡張計画

### 1.2 新人エンジニアが理解すべき運用の責任範囲

**一次サポート（Level 1）**
```
対応内容：
- 基本的な操作方法の案内
- よくある問い合わせの回答
- 簡単なトラブルシューティング
- 上位層へのエスカレーション

必要スキル：
- Tableauの基本操作
- FAQ文書の理解
- コミュニケーション能力
- 問題の切り分け能力
```

**二次サポート（Level 2）**
```
対応内容：
- 技術的な問題の調査・解決
- ダッシュボードの修正・調整
- データ更新問題の解決
- パフォーマンス問題の初期対応

必要スキル：
- Tableau開発スキル
- データベース知識
- 基本的なサーバー管理
- ログ解析能力
```

**三次サポート（Level 3）**
```
対応内容：
- システム設計の変更
- 大規模な障害対応
- 新機能の開発
- アーキテクチャ改善

必要スキル：
- 高度な技術的専門知識
- システム設計能力
- プロジェクト管理
- ベンダー連携
```

---

## 第2章：要件定義書の作成（運用要件編）

### 2.1 運用要件定義書テンプレート

**基本情報セクション**
```
■ プロジェクト基本情報
- プロジェクト名：
- システム名：
- 作成日：
- 作成者：
- 承認者：
- バージョン：

■ 関係者情報
- プロジェクトマネージャー：
- システム管理者：
- 業務担当者：
- ベンダー担当者：
```

**システム概要セクション**
```
■ システムの目的・位置づけ
- ビジネス目的：
- 解決したい課題：
- 期待する効果：
- 他システムとの関連：

■ 利用者情報
- 想定利用者数：
- 利用者の属性：
- 利用頻度：
- アクセス元（社内/社外）：
```

### 2.2 運用要件の詳細定義

**サービスレベル要件**
```
■ 可用性要件
- 稼働時間：平日 8:00-20:00（99.5%以上）
- 計画停止：月次メンテナンス 第2土曜日 2:00-6:00
- 障害復旧時間：軽微障害 2時間以内、重大障害 4時間以内

■ パフォーマンス要件
- レスポンス時間：ダッシュボード表示 5秒以内
- 同時接続数：最大50ユーザー
- データ更新頻度：日次 6:00、週次 日曜日 3:00

■ セキュリティ要件
- 認証方式：Active Directory連携
- アクセス制御：役職・部門別権限設定
- データ暗号化：保存時・転送時ともに暗号化
- ログ保存：操作ログ 1年間保存
```

**データ管理要件**
```
■ データソース管理
- 主要データソース：販売管理DB、財務会計システム
- データ更新方式：ETL自動実行
- データ保存期間：3年間
- バックアップ：日次フルバックアップ

■ データ品質管理
- データ検証ルール：必須項目チェック、範囲チェック
- エラーハンドリング：エラー時は前日データで代替
- データ修正ルール：承認プロセス必須
- 品質レポート：週次でデータ品質状況を報告
```

### 2.3 運用体制要件

**組織・役割定義**
```
■ 運用組織
┌─────────────┐
│   運用責任者   │ ← 全体統括、意思決定
│   (部長レベル)  │
└─────────────┘
         │
┌─────────────┐
│  システム管理者  │ ← 技術的な運用管理
│ (課長・主任レベル) │
└─────────────┘
         │
┌─────────────┬─────────────┐
│  運用エンジニア  │    業務担当者    │
│   (担当者)     │   (エンドユーザー)  │
└─────────────┴─────────────┘

■ 役割・責任定義
運用責任者：
- 運用方針の決定
- 予算管理
- 重大障害時の判断

システム管理者：
- 日常運用の管理
- 技術的問題の解決
- 改善計画の立案

運用エンジニア：
- システム監視
- 定期メンテナンス
- ユーザーサポート

業務担当者：
- 業務要件の提供
- 受入テスト実施
- エンドユーザーサポート
```

**連絡体制・エスカレーション**
```
■ 通常時の連絡体制
問い合わせ窓口 → 運用エンジニア → システム管理者

■ 障害時のエスカレーション
Level 1: 運用エンジニア（30分以内）
Level 2: システム管理者（1時間以内）
Level 3: 運用責任者・ベンダー（2時間以内）

■ 連絡手段
- 通常時：メール、チャット
- 緊急時：電話、SMS
- 障害報告：専用システム
```

---

## 第3章：運用設計書の作成

### 3.1 運用設計書の構成要素

**システム運用設計**
```
■ インフラ運用
1. サーバー監視
   - CPU使用率：80%超でアラート
   - メモリ使用率：85%超でアラート
   - ディスク使用率：90%超でアラート
   - 監視ツール：Zabbix/Nagios

2. ネットワーク監視
   - 通信可用性：ping監視
   - レスポンス時間：5秒超でアラート
   - 帯域使用率：70%超で注意

3. バックアップ運用
   - 実行時間：毎日 2:00-4:00
   - 保存世代：日次7世代、週次4世代、月次12世代
   - リストア訓練：四半期に1回実施

■ アプリケーション運用
1. Tableau Server管理
   - サービス監視：全サービスの稼働状況
   - ライセンス監視：使用数・期限管理
   - ログ監視：エラーログの定期確認

2. データ更新管理
   - ETL実行監視：成功/失敗の確認
   - データ整合性チェック：件数・合計値検証
   - 更新遅延時の対応：手動実行・利用者通知
```

**データ運用設計**
```
■ データソース管理
データソース一覧：
┌──────┬──────┬──────┬──────┬──────┐
│ No   │ 名称     │ 更新頻度 │ 更新時間 │ 責任者   │
├──────┼──────┼──────┼──────┼──────┤
│ 1    │ 売上DB   │ 日次     │ 6:00    │ 田中     │
│ 2    │ 在庫DB   │ 時間     │ 毎時00分 │ 佐藤     │
│ 3    │ 顧客DB   │ 週次     │ 日 3:00  │ 鈴木     │
└──────┴──────┴──────┴──────┴──────┘

■ データ品質管理
1. 品質チェック項目
   - 必須項目の欠損チェック
   - 数値範囲の妥当性チェック
   - 重複データの検出
   - 参照整合性の確認

2. エラー対応フロー
   検証エラー発生
   ↓
   エラー詳細の調査
   ↓
   データ提供元への確認
   ↓
   修正または代替データでの対応
   ↓
   再検証・承認
   ↓
   システム反映
```

### 3.2 コンテンツ運用設計

**ダッシュボード管理**
```
■ コンテンツライフサイクル
1. 開発フェーズ
   - 開発環境での作成・テスト
   - レビュー・承認プロセス
   - 本番環境への展開

2. 運用フェーズ
   - 定期的な動作確認
   - パフォーマンス監視
   - ユーザーフィードバック収集

3. 改善フェーズ
   - 改善要件の評価
   - 影響範囲の分析
   - 変更実装・テスト

4. 廃止フェーズ
   - 利用状況の評価
   - 廃止計画の策定
   - データ保存・削除

■ バージョン管理
命名規則：
- ダッシュボード名_v1.0_YYYYMMDD
- 重要な変更：メジャーバージョンアップ（v2.0）
- 軽微な修正：マイナーバージョンアップ（v1.1）

保存場所：
- 開発版：Development/作成者名/
- テスト版：Testing/
- 本番版：Production/
- アーカイブ：Archive/年度/
```

**アクセス権限管理**
```
■ 権限レベル定義
1. 閲覧者（Viewer）
   - ダッシュボードの表示のみ
   - フィルター操作可能
   - エクスポート制限あり

2. 編集者（Explorer）
   - ダッシュボードの編集可能
   - 新規作成可能
   - 特定フォルダのみアクセス

3. 管理者（Creator）
   - 全機能利用可能
   - データソース管理
   - ユーザー管理

■ 権限付与フロー
申請 → 上司承認 → システム管理者確認 → 権限設定 → 通知
```

---

## 第4章：メンテナンス用シートの作成

### 4.1 日常メンテナンスチェックシート

**日次チェック項目**
```
□ システム稼働状況確認
  □ Tableau Serverサービス状態
  □ データベース接続状態
  □ ウェブサイトアクセス可能性

□ データ更新状況確認
  □ ETL処理の実行結果
  □ データ件数の妥当性
  □ エラーログの有無

□ パフォーマンス確認
  □ レスポンス時間測定
  □ サーバーリソース使用状況
  □ 同時接続数

□ セキュリティ確認
  □ 不正アクセスの痕跡
  □ 権限変更の確認
  □ ログイン失敗回数

実施者：___________  実施日：___________
異常事項：_________________________________
対応内容：_________________________________
```

**週次チェック項目**
```
□ システム全体ヘルスチェック
  □ 全ダッシュボードの動作確認
  □ データソース接続テスト
  □ バックアップ状況確認

□ ユーザー利用状況分析
  □ アクセス数の推移
  □ 利用時間帯の分析
  □ エラー発生状況

□ パフォーマンス分析
  □ 週間レスポンス時間推移
  □ 重いダッシュボードの特定
  □ リソース使用量トレンド

□ セキュリティレビュー
  □ アクセス権限の妥当性
  □ 新規ユーザーの確認
  □ セキュリティパッチ適用状況
```

### 4.2 月次メンテナンスシート

**月次作業項目**
```
■ システムメンテナンス
□ サーバーのパフォーマンス分析
□ 不要ファイル・ログの削除
□ システム設定の見直し
□ セキュリティパッチの適用検討

■ データメンテナンス
□ データ品質レポートの作成
□ マスターデータの整合性確認
□ 古いデータのアーカイブ
□ データソース接続情報の更新

■ コンテンツメンテナンス
□ 利用頻度の低いダッシュボード特定
□ パフォーマンス改善対象の選定
□ コンテンツ整理・統合の検討
□ 新規要望の優先度付け

■ 運用レビュー
□ 月次レポートの作成
□ SLA達成状況の確認
□ 改善提案の策定
□ 次月計画の作成
```

**月次レポートテンプレート**
```
【Tableau運用月次レポート】

■ 基本統計
- 総利用者数：___人（前月比：___）
- 月間アクセス数：___回（前月比：___）
- 稼働率：___%（目標：99.5%）
- 平均レスポンス時間：___秒（目標：5秒以内）

■ 障害・問題発生状況
- 障害発生件数：___件
- 平均復旧時間：___時間
- 主な障害原因：___________
- 再発防止策：___________

■ パフォーマンス状況
- 最も利用されたダッシュボード：
  1. ___________（___回）
  2. ___________（___回）
  3. ___________（___回）

- パフォーマンス改善対象：
  1. ___________（___秒）
  2. ___________（___秒）

■ 改善実施状況
- 完了した改善：___________
- 進行中の改善：___________
- 新規改善提案：___________

■ 次月予定
- 予定メンテナンス：___________
- 新機能リリース：___________
- 改善施策：___________
```

### 4.3 障害対応手順書

**障害レベル別対応手順**
```
■ レベル1：軽微な障害
影響範囲：特定ユーザー・機能のみ
対応時間：2時間以内

対応手順：
1. 現象の確認・記録
2. 影響範囲の特定
3. 暫定対応の実施
4. 利用者への通知
5. 根本原因の調査
6. 恒久対策の実施
7. 完了報告

■ レベル2：中程度の障害
影響範囲：複数ユーザー・システム機能
対応時間：4時間以内

対応手順：
1. 緊急対策本部の設置
2. ステークホルダーへの第一報
3. 影響範囲の詳細調査
4. 復旧計画の策定
5. 復旧作業の実施
6. 動作確認・テスト
7. 正常化確認・報告

■ レベル3：重大な障害
影響範囲：システム全体停止
対応時間：8時間以内

対応手順：
1. 緊急事態宣言
2. 経営層への報告
3. 外部ベンダーへの連絡
4. 代替手段の準備
5. 復旧作業の実施
6. 段階的なサービス復旧
7. 事後検証・改善策策定
```

**障害報告書テンプレート**
```
【障害報告書】

■ 基本情報
- 発生日時：___年___月___日 ___時___分
- 検出日時：___年___月___日 ___時___分
- 復旧日時：___年___月___日 ___時___分
- 障害レベル：Level ___
- 対応者：___________

■ 障害内容
- 現象：___________
- 影響範囲：___________
- 影響ユーザー数：約___人
- 業務への影響：___________

■ 原因分析
- 直接原因：___________
- 根本原因：___________
- 発生経緯：___________

■ 対応内容
- 緊急対応：___________
- 恒久対策：___________
- 確認テスト：___________

■ 再発防止策
- 短期対策：___________
- 中長期対策：___________
- 実施予定日：___________

■ 学んだ教訓
- 良かった点：___________
- 改善すべき点：___________
- 今後の対策：___________
```

---

## 第5章：運用監視とKPI管理

### 5.1 運用KPIの設定

**システム品質KPI**
```
■ 可用性指標
- システム稼働率：99.5%以上
- 計画外停止時間：月間2時間以内
- 障害復旧時間：平均4時間以内

■ パフォーマンス指標
- ダッシュボード表示時間：5秒以内
- データ更新成功率：99%以上
- 同時接続数：最大50ユーザー

■ セキュリティ指標
- セキュリティインシデント：0件
- 不正アクセス試行：検知率100%
- パッチ適用率：100%（30日以内）
```

**ユーザー満足度KPI**
```
■ 利用状況指標
- 月間アクティブユーザー数：増加傾向
- ダッシュボード利用率：80%以上
- ヘルプデスク問い合わせ：月間20件以下

■ 満足度指標
- ユーザー満足度：4.0/5.0以上
- 使いやすさ評価：4.0/5.0以上
- 業務貢献度：4.0/5.0以上
```

### 5.2 監視ダッシュボードの設計

**リアルタイム監視画面**
```
■ システム状況
┌─────────────┬─────────────┐
│ サーバー状態    │ データ更新状況  │
│ ● 正常 (緑)    │ ● 最新 (緑)    │
│ CPU: 45%      │ 最終更新:      │
│ メモリ: 67%    │ 6:00 (正常)   │
└─────────────┴─────────────┘

■ アクセス状況
現在の同時接続数: 23ユーザー
今日のアクセス数: 145回
レスポンス時間: 平均3.2秒

■ アラート一覧
- なし（正常稼働中）
```

**週次レポートダッシュボード**
```
■ 利用統計
- 週間アクセス数推移グラフ
- ユーザー別利用状況
- ダッシュボード別人気ランキング
- 時間帯別利用パターン

■ パフォーマンス分析
- レスポンス時間推移
- エラー発生率
- リソース使用率トレンド
- 改善効果測定
```

---

## 第6章：改善・最適化の継続プロセス

### 6.1 継続改善のサイクル

**PDCAサイクルの実装**
```
■ Plan（計画）
- 月次での改善テーマ設定
- KPI目標値の設定
- 改善施策の立案
- リソース・スケジュール計画

■ Do（実行）
- 改善施策の実装
- 新機能の開発・展開
- ユーザートレーニング実施
- システム調整・最適化

■ Check（評価）
- KPI達成状況の確認
- ユーザーフィードバック収集
- パフォーマンス測定
- 問題点の抽出

■ Action（改善）
- 成功要因の標準化
- 問題点の根本対策
- 次期計画への反映
- ベストプラクティス共有
```

### 6.2 改善提案管理

**改善要望管理シート**
```
■ 要望受付情報
要望ID: REQ-2024-001
受付日: 2024/03/15
要望者: 営業部 田中様
カテゴリ: 機能追加

■ 要望内容
タイトル: 地域別売上分析の追加
詳細: 現在の全社売上ダッシュボードに、
      地域別（東日本/西日本）での
      売上比較機能を追加したい
期待効果: 地域戦略の立案精度向上

■ 影響分析
- 技術的難易度: 中
- 開発工数: 10人日
- 影響範囲: 売上ダッシュボード
- 必要スキル: Tableau開発、SQL

■ 優先度評価
- ビジネス価値: 高
- 緊急度: 中
- 実装コスト: 中
- 総合優先度: B（3ヶ月以内実装）

■ 対応計画
担当者: システム開発チーム
開始予定: 2024/04/01
完了予定: 2024/04/15
ステータス: 承認済み
```

### 6.3 ユーザーフィードバック収集

**定期的な満足度調査**
```
■ 四半期ユーザーサーベイ
1. 全体満足度（5段階評価）
2. 使いやすさ（5段階評価）
3. レスポンス速度（5段階評価）
4. 機能充実度（5段階評価）
5. サポート品質（5段階評価）

■ 自由記述項目
- 良い点・評価できる点
- 改善してほしい点
- 新たに欲しい機能
- その他の意見・要望

■ 結果分析・アクション
- 定量評価の推移分析
- 自由記述内容の分類・分析
- 改善優先度の決定
- 改善計画への反映
```

---

## 第7章：新人エンジニア向け実践ガイド

### 7.1 段階的な習得ロードマップ

**第1段階：基礎理解（1-2ヶ月）**
```
習得内容：
□ Tableau運用の全体像理解
□ 要件定義書の読み方
□ 基本的な運用作業の習得
□ メンテナンス手順の理解

実践課題：
- 既存の運用設計書を読み込む
- 日次チェックリストの実行
- 簡単な障害対応の経験
- 先輩のサポート業務参加
```

**第2段階：実務参加（2-4ヶ月）**
```
習得内容：
□ 運用設計書の作成参加
□ メンテナンス作業の独立実行
□ 簡単な改善提案の立案
□ ユーザーサポートの実施

実践課題：
- 小規模プロジェクトの運用設計担当
- 月次メンテナンスの単独実施
- 改善要望の分析・優先度付け
- ユーザートレーニング補助
```

**第3段階：独立運用（4-6ヶ月）**
```
習得内容：
□ 運用設計の全体設計
□ 障害対応の主担当
□ 改善プロジェクトのリード
□ 運用チームのマネジメント

実践課題：
- 新規プロジェクトの運用設計書作成
- 重大障害の対応リード
- 運用改善プロジェクトの推進
- 新人の指導・メンタリング
```
