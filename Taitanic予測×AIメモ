# タイタニック号生存予測モデル
# Kaggleコンペティション用

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import warnings
warnings.filterwarnings('ignore')

# 日本語フォント設定
plt.rcParams['font.family'] = 'DejaVu Sans'
sns.set_style("whitegrid")

class TitanicPredictor:
    def __init__(self):
        self.model = None
        self.le_sex = LabelEncoder()
        self.le_embarked = LabelEncoder()
        
    def load_data(self, train_path='train.csv', test_path='test.csv'):
        """データ読み込み"""
        self.train_df = pd.read_csv(train_path)
        self.test_df = pd.read_csv(test_path)
        
        print("=== データ概要 ===")
        print(f"学習データ: {self.train_df.shape}")
        print(f"テストデータ: {self.test_df.shape}")
        print("\n=== 学習データの最初の5行 ===")
        print(self.train_df.head())
        
        return self.train_df, self.test_df
    
    def explore_data(self):
        """データ探索・可視化"""
        print("\n=== 基本統計情報 ===")
        print(self.train_df.describe())
        
        print("\n=== 欠損値確認 ===")
        print(self.train_df.isnull().sum())
        
        # 生存率の基本分析
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        
        # 性別による生存率
        sns.barplot(data=self.train_df, x='Sex', y='Survived', ax=axes[0,0])
        axes[0,0].set_title('性別による生存率')
        
        # 客室等級による生存率
        sns.barplot(data=self.train_df, x='Pclass', y='Survived', ax=axes[0,1])
        axes[0,1].set_title('客室等級による生存率')
        
        # 年齢分布
        axes[1,0].hist(self.train_df['Age'].dropna(), bins=30, alpha=0.7)
        axes[1,0].set_title('年齢分布')
        axes[1,0].set_xlabel('年齢')
        
        # 運賃分布
        axes[1,1].hist(self.train_df['Fare'].dropna(), bins=30, alpha=0.7)
        axes[1,1].set_title('運賃分布')
        axes[1,1].set_xlabel('運賃')
        
        plt.tight_layout()
        plt.show()
        
        # 相関行列
        plt.figure(figsize=(10, 8))
        # 数値カラムのみ選択
        numeric_cols = self.train_df.select_dtypes(include=[np.number]).columns
        correlation_matrix = self.train_df[numeric_cols].corr()
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
        plt.title('特徴量間の相関')
        plt.show()
    
    def preprocess_data(self):
        """データ前処理"""
        # 両方のデータセットを結合して一括処理
        all_data = pd.concat([self.train_df, self.test_df], ignore_index=True)
        
        print("\n=== データ前処理開始 ===")
        
        # 1. 年齢の欠損値を中央値で補完
        age_median = all_data['Age'].median()
        all_data['Age'].fillna(age_median, inplace=True)
        
        # 2. 乗船港の欠損値を最頻値で補完
        embarked_mode = all_data['Embarked'].mode()[0]
        all_data['Embarked'].fillna(embarked_mode, inplace=True)
        
        # 3. 運賃の欠損値を中央値で補完
        fare_median = all_data['Fare'].median()
        all_data['Fare'].fillna(fare_median, inplace=True)
        
        # 4. 新しい特徴量を作成
        # 家族サイズ
        all_data['FamilySize'] = all_data['SibSp'] + all_data['Parch'] + 1
        
        # 一人旅かどうか
        all_data['IsAlone'] = (all_data['FamilySize'] == 1).astype(int)
        
        # 敬称を抽出
        all_data['Title'] = all_data['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)
        all_data['Title'] = all_data['Title'].replace(['Lady', 'Countess','Capt', 'Col',
                                                     'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')
        all_data['Title'] = all_data['Title'].replace('Mlle', 'Miss')
        all_data['Title'] = all_data['Title'].replace('Ms', 'Miss')
        all_data['Title'] = all_data['Title'].replace('Mme', 'Mrs')
        
        # 年齢グループ
        all_data['AgeGroup'] = pd.cut(all_data['Age'], bins=[0, 12, 18, 35, 60, 100], 
                                    labels=['Child', 'Teen', 'Adult', 'Middle', 'Senior'])
        
        # 運賃グループ
        all_data['FareGroup'] = pd.qcut(all_data['Fare'], q=4, labels=['Low', 'Medium', 'High', 'VeryHigh'])
        
        # 5. カテゴリカル変数をエンコード
        # 性別
        all_data['Sex_encoded'] = self.le_sex.fit_transform(all_data['Sex'])
        
        # 乗船港
        all_data['Embarked_encoded'] = self.le_embarked.fit_transform(all_data['Embarked'])
        
        # 敬称をワンホットエンコーディング
        title_dummies = pd.get_dummies(all_data['Title'], prefix='Title')
        all_data = pd.concat([all_data, title_dummies], axis=1)
        
        # 年齢グループをワンホットエンコーディング
        age_group_dummies = pd.get_dummies(all_data['AgeGroup'], prefix='AgeGroup')
        all_data = pd.concat([all_data, age_group_dummies], axis=1)
        
        # 運賃グループをワンホットエンコーディング
        fare_group_dummies = pd.get_dummies(all_data['FareGroup'], prefix='FareGroup')
        all_data = pd.concat([all_data, fare_group_dummies], axis=1)
        
        # 6. 学習用とテスト用に分割
        train_len = len(self.train_df)
        self.processed_train = all_data[:train_len].copy()
        self.processed_test = all_data[train_len:].copy()
        
        # 7. 特徴量選択
        feature_columns = [
            'Pclass', 'Sex_encoded', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked_encoded',
            'FamilySize', 'IsAlone'
        ] + [col for col in all_data.columns if col.startswith(('Title_', 'AgeGroup_', 'FareGroup_'))]
        
        self.X = self.processed_train[feature_columns]
        self.y = self.processed_train['Survived']
        self.X_test = self.processed_test[feature_columns]
        
        print(f"特徴量数: {len(feature_columns)}")
        print("使用する特徴量:", feature_columns)
        print("前処理完了！")
        
        return self.X, self.y, self.X_test
    
    def train_model(self):
        """モデル訓練"""
        print("\n=== モデル訓練開始 ===")
        
        # データを訓練用と検証用に分割
        X_train, X_val, y_train, y_val = train_test_split(
            self.X, self.y, test_size=0.2, random_state=42, stratify=self.y
        )
        
        # 複数のモデルを試す
        models = {
            'RandomForest': RandomForestClassifier(n_estimators=100, random_state=42, max_depth=5),
            'LogisticRegression': LogisticRegression(random_state=42, max_iter=1000)
        }
        
        best_score = 0
        best_model_name = ""
        
        for name, model in models.items():
            # クロスバリデーション
            cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')
            
            # 訓練
            model.fit(X_train, y_train)
            
            # 検証
            val_pred = model.predict(X_val)
            val_accuracy = accuracy_score(y_val, val_pred)
            
            print(f"\n{name}:")
            print(f"  クロスバリデーション平均: {cv_scores.mean():.4f} (+/- {cv_scores.std() * 2:.4f})")
            print(f"  検証精度: {val_accuracy:.4f}")
            
            if val_accuracy > best_score:
                best_score = val_accuracy
                best_model_name = name
                self.model = model
        
        print(f"\n最良モデル: {best_model_name} (精度: {best_score:.4f})")
        
        # 特徴量重要度の表示（RandomForestの場合）
        if isinstance(self.model, RandomForestClassifier):
            feature_importance = pd.DataFrame({
                'feature': self.X.columns,
                'importance': self.model.feature_importances_
            }).sort_values('importance', ascending=False)
            
            print("\n=== 特徴量重要度 Top 10 ===")
            print(feature_importance.head(10))
            
            # 重要度の可視化
            plt.figure(figsize=(10, 6))
            sns.barplot(data=feature_importance.head(10), x='importance', y='feature')
            plt.title('特徴量重要度 Top 10')
            plt.xlabel('重要度')
            plt.show()
        
        return self.model
    
    def evaluate_model(self):
        """モデル評価"""
        # 訓練データで再分割して詳細評価
        X_train, X_val, y_train, y_val = train_test_split(
            self.X, self.y, test_size=0.2, random_state=42, stratify=self.y
        )
        
        val_pred = self.model.predict(X_val)
        
        print("\n=== モデル評価 ===")
        print("精度:", accuracy_score(y_val, val_pred))
        print("\n分類レポート:")
        print(classification_report(y_val, val_pred))
        
        # 混同行列
        plt.figure(figsize=(8, 6))
        cm = confusion_matrix(y_val, val_pred)
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
        plt.title('混同行列')
        plt.ylabel('実際')
        plt.xlabel('予測')
        plt.show()
    
    def predict_and_submit(self, submission_filename='submission.csv'):
        """予測と提出ファイル作成"""
        print("\n=== 予測実行 ===")
        
        # テストデータで予測
        test_predictions = self.model.predict(self.X_test)
        
        # 提出ファイル作成
        submission = pd.DataFrame({
            'PassengerId': self.test_df['PassengerId'],
            'Survived': test_predictions
        })
        
        submission.to_csv(submission_filename, index=False)
        print(f"提出ファイル '{submission_filename}' を作成しました！")
        
        # 予測結果の概要
        survival_rate = test_predictions.mean()
        print(f"予測生存率: {survival_rate:.3f}")
        print(f"予測生存者数: {test_predictions.sum()}/{len(test_predictions)}")
        
        return submission

# 使用例
def main():
    """メイン実行関数"""
    print("🚢 タイタニック号生存予測モデル 🚢")
    print("=" * 50)
    
    # モデル初期化
    predictor = TitanicPredictor()
    
    try:
        # 1. データ読み込み
        train_df, test_df = predictor.load_data()
        
        # 2. データ探索
        predictor.explore_data()
        
        # 3. データ前処理
        X, y, X_test = predictor.preprocess_data()
        
        # 4. モデル訓練
        model = predictor.train_model()
        
        # 5. モデル評価
        predictor.evaluate_model()
        
        # 6. 予測と提出ファイル作成
        submission = predictor.predict_and_submit()
        
        print("\n🎉 モデル作成完了！")
        print("submission.csvファイルをKaggleに提出してください。")
        
    except FileNotFoundError:
        print("❌ エラー: train.csvまたはtest.csvファイルが見つかりません。")
        print("Kaggleからデータをダウンロードして、同じフォルダに配置してください。")
        
        # サンプルデータでデモンストレーション
        print("\n📝 サンプルデータでデモを実行します...")
        demo_with_sample_data()

def demo_with_sample_data():
    """サンプルデータでのデモンストレーション"""
    print("サンプルデータを生成中...")
    
    # サンプル学習データ作成
    np.random.seed(42)
    n_samples = 800
    
    sample_train = pd.DataFrame({
        'PassengerId': range(1, n_samples + 1),
        'Pclass': np.random.choice([1, 2, 3], n_samples, p=[0.2, 0.2, 0.6]),
        'Name': [f'Sample Name {i}' for i in range(n_samples)],
        'Sex': np.random.choice(['male', 'female'], n_samples, p=[0.65, 0.35]),
        'Age': np.random.normal(30, 12, n_samples),
        'SibSp': np.random.choice([0, 1, 2, 3], n_samples, p=[0.7, 0.2, 0.07, 0.03]),
        'Parch': np.random.choice([0, 1, 2], n_samples, p=[0.8, 0.15, 0.05]),
        'Ticket': [f'TICKET{i}' for i in range(n_samples)],
        'Fare': np.random.lognormal(3, 1, n_samples),
        'Cabin': [''] * n_samples,  # 大部分が欠損
        'Embarked': np.random.choice(['S', 'C', 'Q'], n_samples, p=[0.7, 0.2, 0.1])
    })
    
    # 生存率をルールベースで設定（女性、上級クラス、若年者が生存しやすい）
    survival_prob = 0.3  # ベース生存率
    survival_prob += (sample_train['Sex'] == 'female') * 0.4  # 女性ボーナス
    survival_prob += (sample_train['Pclass'] == 1) * 0.2  # 1等クラスボーナス
    survival_prob += (sample_train['Age'] < 15) * 0.2  # 子供ボーナス
    
    sample_train['Survived'] = np.random.binomial(1, survival_prob)
    
    # サンプルテストデータ
    n_test = 200
    sample_test = pd.DataFrame({
        'PassengerId': range(n_samples + 1, n_samples + n_test + 1),
        'Pclass': np.random.choice([1, 2, 3], n_test, p=[0.2, 0.2, 0.6]),
        'Name': [f'Test Name {i}' for i in range(n_test)],
        'Sex': np.random.choice(['male', 'female'], n_test, p=[0.65, 0.35]),
        'Age': np.random.normal(30, 12, n_test),
        'SibSp': np.random.choice([0, 1, 2, 3], n_test, p=[0.7, 0.2, 0.07, 0.03]),
        'Parch': np.random.choice([0, 1, 2], n_test, p=[0.8, 0.15, 0.05]),
        'Ticket': [f'TEST_TICKET{i}' for i in range(n_test)],
        'Fare': np.random.lognormal(3, 1, n_test),
        'Cabin': [''] * n_test,
        'Embarked': np.random.choice(['S', 'C', 'Q'], n_test, p=[0.7, 0.2, 0.1])
    })
    
    # ファイル保存
    sample_train.to_csv('train.csv', index=False)
    sample_test.to_csv('test.csv', index=False)
    
    print("サンプルデータを作成しました: train.csv, test.csv")
    
    # モデル実行
    predictor = TitanicPredictor()
    predictor.train_df = sample_train
    predictor.test_df = sample_test
    
    print("\n=== サンプルデータでの学習開始 ===")
    predictor.preprocess_data()
    predictor.train_model()
    predictor.evaluate_model()
    predictor.predict_and_submit('sample_submission.csv')

if __name__ == "__main__":
    main()
