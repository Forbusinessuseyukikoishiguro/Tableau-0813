# 仕様変更受付・管理のためのJira構築 & 対応ヒアリングシート

## 📚 はじめに

プロジェクト進行中に発生する仕様変更は、適切に管理しないとスコープクリープや品質低下の原因となります。本ガイドでは、Jiraを活用した効率的な仕様変更管理プロセスと、的確な要件把握のためのヒアリングシートを提供します。

**対象読者**
- プロジェクトマネージャー
- システムエンジニア・開発者
- ビジネスアナリスト
- Jira管理者

## 🎯 仕様変更管理の重要性

### なぜ適切な管理が必要か
- **スコープ管理**: 無秩序な変更要求の防止
- **品質確保**: 影響範囲の適切な評価
- **コスト管理**: 変更コストの明確化
- **スケジュール管理**: 納期への影響評価
- **コミュニケーション**: ステークホルダー間の認識統一

## 📋 1. Jira プロジェクト設定

### 1.1 プロジェクト作成と基本設定

#### プロジェクト設定値
```
プロジェクト設定:
──────────────
プロジェクト名: CR-[プロジェクト名] (Change Request)
プロジェクトキー: CR[XX] (例: CRHR - HR系システム)
プロジェクトタイプ: ソフトウェア開発 or ビジネス
リード: プロジェクトマネージャー
デフォルト担当者: 未割り当て
```

### 1.2 課題タイプの設定

#### カスタム課題タイプ
```
課題タイプ設定:
──────────────
1. 機能変更要求 (Feature Change)
   - 既存機能の修正・拡張
   - アイコン: 🔧

2. 新機能追加要求 (New Feature)
   - 全く新しい機能の追加
   - アイコン: ⭐

3. UI/UX変更要求 (UI/UX Change)
   - 画面デザイン・操作性の変更
   - アイコン: 🎨

4. データ変更要求 (Data Change)
   - データ構造・フォーマットの変更
   - アイコン: 📊

5. 統合変更要求 (Integration Change)
   - 外部システム連携の変更
   - アイコン: 🔗

6. セキュリティ変更要求 (Security Change)
   - セキュリティ要件の変更
   - アイコン: 🔒

7. 緊急変更要求 (Urgent Change)
   - 緊急対応が必要な変更
   - アイコン: 🚨
```

### 1.3 カスタムフィールドの設計

#### 必須カスタムフィールド
```
カスタムフィールド設定:
────────────────────

1. 変更要求者 (Change Requestor)
   - タイプ: ユーザーピッカー
   - 必須: はい

2. 業務部署 (Business Department)
   - タイプ: 選択リスト（単一選択）
   - 選択肢: 営業部, マーケティング部, 人事部, 経理部, その他

3. 変更理由 (Change Reason)
   - タイプ: 選択リスト（単一選択）
   - 選択肢: 業務改善, 法規制対応, 顧客要求, 不具合対応, その他

4. 優先度理由 (Priority Justification)
   - タイプ: テキストフィールド（複数行）
   - 必須: Priority が High/Urgent の場合

5. 影響範囲 (Impact Scope)
   - タイプ: チェックボックス
   - 選択肢: フロントエンド, バックエンド, データベース, 外部連携, セキュリティ, その他

6. 期待効果 (Expected Benefits)
   - タイプ: テキストフィールド（複数行）
   - 必須: はい

7. 希望納期 (Requested Delivery)
   - タイプ: 日付ピッカー
   - 必須: はい

8. 工数見積 (Effort Estimation)
   - タイプ: 数値フィールド
   - 単位: 人日

9. 費用見積 (Cost Estimation)
   - タイプ: 数値フィールド
   - 単位: 万円

10. 承認者 (Approver)
    - タイプ: ユーザーピッカー（複数選択）

11. テスト工数 (Testing Effort)
    - タイプ: 数値フィールド
    - 単位: 人日

12. リリース計画 (Release Plan)
    - タイプ: 選択リスト（単一選択）
    - 選択肢: 次回リリース, 緊急リリース, 将来リリース
```

## 🔄 2. ワークフロー設計

### 2.1 変更要求ワークフロー

#### ステータス設計
```
ワークフロー: 変更要求管理
─────────────────────

1. 🆕 要求受付 (New Request)
   - 初期ステータス
   - 変更要求が提出された状態

2. 📋 要件整理中 (Requirements Analysis)
   - ビジネスアナリストが要件を整理
   - ヒアリング実施中

3. 📊 影響調査中 (Impact Analysis)
   - 技術的影響範囲の調査
   - 工数・費用見積作成

4. ⏳ 承認待ち (Pending Approval)
   - ステークホルダーの承認待ち
   - 承認者による審査中

5. ✅ 承認済み (Approved)
   - 変更要求が承認された状態
   - 開発着手可能

6. 🚫 却下 (Rejected)
   - 変更要求が却下された状態
   - 却下理由を明記

7. 🔄 保留 (On Hold)
   - 一時的に保留された状態
   - 保留理由と再開条件を明記

8. 🏗️ 開発中 (In Development)
   - 開発作業が進行中
   - 進捗管理が必要

9. 🧪 テスト中 (In Testing)
   - テスト実施中
   - 品質確認段階

10. ✨ 完了 (Done)
    - 変更要求が完了した状態
    - 本番リリース済み

11. 🔙 差し戻し (Returned)
    - 前工程への差し戻し
    - 修正・追加情報が必要
```

### 2.2 トランジション設定

#### ワークフロートランジション
```
トランジション設定:
─────────────────

要求受付 → 要件整理中
  条件: なし
  担当者: ビジネスアナリスト
  必須フィールド: 変更要求者, 業務部署

要件整理中 → 影響調査中
  条件: ヒアリングシート完了
  担当者: システムエンジニア
  必須フィールド: 優先度理由, 期待効果

影響調査中 → 承認待ち
  条件: 影響調査完了
  担当者: プロジェクトマネージャー
  必須フィールド: 工数見積, 費用見積, 承認者

承認待ち → 承認済み
  条件: 承認者による承認
  担当者: 承認者
  必須フィールド: なし

承認待ち → 却下
  条件: なし
  担当者: 承認者
  必須フィールド: 却下理由

承認済み → 開発中
  条件: 開発リソース確保
  担当者: 開発リーダー
  必須フィールド: 担当開発者

開発中 → テスト中
  条件: 開発完了
  担当者: テスター
  必須フィールド: テスト計画

テスト中 → 完了
  条件: テスト合格
  担当者: プロジェクトマネージャー
  必須フィールド: リリース日

任意のステータス → 差し戻し
  条件: なし
  担当者: 各工程担当者
  必須フィールド: 差し戻し理由
```

## 📊 3. ダッシュボード設計

### 3.1 管理者向けダッシュボード

#### KPI ダッシュボード
```
ダッシュボード: 変更要求管理KPI
──────────────────────────

1. 要求件数サマリー
   - 今月受付件数
   - 累計件数
   - 前月比較

2. ステータス別分布
   - 円グラフ: 各ステータスの割合
   - 棒グラフ: ステータス別件数推移

3. 優先度別分析
   - High/Medium/Low の分布
   - 緊急要求の処理状況

4. 部署別要求状況
   - 部署別要求件数
   - 部署別承認率

5. 処理時間分析
   - 平均処理時間
   - ステータス別滞留時間
   - SLA達成率

6. 工数・費用サマリー
   - 見積工数合計
   - 実績工数合計
   - 費用集計

フィルター設定:
- 期間フィルター (今月/先月/四半期)
- 部署フィルター
- 優先度フィルター
- 担当者フィルター
```

### 3.2 要求者向けダッシュボード

#### 要求者ダッシュボード
```
ダッシュボード: マイ変更要求
─────────────────────

1. 自分が提出した要求一覧
   - ステータス別表示
   - 優先度順ソート

2. 承認待ち要求
   - 自分が承認者の要求
   - 承認期限表示

3. 進捗状況
   - 開発中の要求進捗
   - 完了予定日

4. 統計情報
   - 承認率
   - 平均処理時間
   - 満足度評価
```

## 📝 4. 対応ヒアリングシート

### 4.1 基本ヒアリングシート

#### テンプレート
```
仕様変更要求ヒアリングシート
===============================

【基本情報】
─────────
要求日: ____________
要求者: ____________ (部署: ____________)
面談者: ____________ (日時: ____________)
要求ID: ____________ (Jira課題キー)

【現状把握】
─────────
1. 現在の業務フロー・システム動作
   現状: 
   
   課題・問題点:
   
   発生頻度: □日次 □週次 □月次 □不定期
   
   影響範囲: □個人 □チーム □部署 □全社
   
2. なぜ変更が必要か（背景・理由）
   □業務効率改善  □顧客要求  □法規制対応  
   □システム不具合  □セキュリティ強化  □その他
   
   詳細:

【要求内容】
─────────
3. 理想的な動作・結果
   To-Be:
   
4. 具体的な変更要求
   機能面:
   
   画面・UI面:
   
   データ面:
   
   処理面:
   
5. 入力・出力仕様
   入力項目:
   
   出力項目:
   
   ファイル形式: □Excel □CSV □PDF □その他( )

【制約・条件】
─────────
6. 必須要件 vs 希望要件
   Must Have (絶対必要):
   
   Should Have (できれば):
   
   Could Have (あれば良い):
   
7. 時期・スケジュール
   希望開始時期: ____________
   希望完了時期: ____________ (理由: ____________)
   
   絶対デッドライン: □あり( ____________ ) □なし
   
8. 予算・工数制約
   予算上限: □制約なし □____________万円以内
   
   工数制約: □制約なし □____________人日以内

【影響・リスク】
─────────
9. 変更しない場合のリスク・影響
   ビジネス影響:
   
   ユーザー影響:
   
   システム影響:
   
10. 他システム・他業務への影響
    関連システム: □あり( ____________ ) □なし
    
    関連部署・業務: □あり( ____________ ) □なし
    
    データ移行: □必要( ____________ ) □不要

【運用・保守】
─────────
11. 運用・保守要件
    運用担当者: ____________
    
    運用手順変更: □必要 □不要
    
    研修・マニュアル: □必要 □不要
    
    保守・サポート: □標準 □特別対応必要

【承認・意思決定】
─────────
12. 承認プロセス
    承認者: ____________ (役職: ____________)
    
    承認条件・基準:
    
    承認予定日: ____________

【その他】
─────────
13. 参考資料・データ
    □現行マニュアル □サンプルデータ □画面キャプチャ
    □業務フロー図 □その他( ____________ )
    
14. 特記事項・補足
    
    
【ヒアリング結果】
─────────
15. 重要度・緊急度評価
    重要度: □High □Medium □Low
    緊急度: □High □Medium □Low
    
    総合優先度: □高 □中 □低
    
16. 技術的実現性
    □容易 □普通 □困難 □要調査
    
    技術的課題:
    
17. 工数・費用概算
    開発工数: ____________人日
    テスト工数: ____________人日
    概算費用: ____________万円
    
18. 推奨アプローチ
    □要求通り実装 □代替案提案 □段階的実装 □保留・延期
    
    理由・詳細:

【アクションアイテム】
─────────
19. 次のステップ
    □詳細要件定義 □技術調査 □承認依頼 □見積作成 □その他
    
    担当者: ____________
    期限: ____________
    
20. 追加ヒアリング・確認事項
    
    
────────────────────────────────
記入者: ____________
確認者: ____________
作成日: ____________
```

### 4.2 技術的詳細ヒアリングシート

#### システム面の詳細確認
```
技術詳細ヒアリングシート
========================

【システム環境】
─────────
1. 対象システム・モジュール
   システム名: ____________
   モジュール/機能: ____________
   バージョン: ____________
   
2. 技術スタック
   フロントエンド: □React □Vue □Angular □その他( )
   バックエンド: □Java □.NET □Python □その他( )
   データベース: □Oracle □SQL Server □MySQL □その他( )
   
3. インフラ環境
   □オンプレミス □AWS □Azure □GCP □その他( )
   
   負荷・パフォーマンス要件:

【データ仕様】
─────────
4. データ構造変更
   テーブル変更: □追加 □削除 □項目変更 □インデックス変更
   
   詳細:
   
5. データ量・パフォーマンス
   対象データ量: ____________件/____________GB
   
   処理時間要件: ____________秒以内
   
   同時アクセス数: ____________ユーザー
   
6. データマイグレーション
   既存データ: □そのまま □変換必要 □削除 □バックアップのみ
   
   変換ルール:

【セキュリティ・認証】
─────────
7. セキュリティ要件
   認証: □変更なし □強化 □新規追加
   
   認可: □変更なし □権限追加 □権限変更
   
   暗号化: □変更なし □追加 □強化
   
8. コンプライアンス
   対応法規: □個人情報保護法 □SOX法 □その他( )
   
   監査要件: □ログ強化 □承認フロー追加 □その他( )

【外部連携】
─────────
9. API・インターフェース
   連携先システム: ____________
   
   連携方法: □REST API □SOAP □ファイル連携 □DB直接
   
   データ形式: □JSON □XML □CSV □固定長 □その他( )
   
10. 通信・ネットワーク
    通信プロトコル: □HTTPS □SFTP □VPN □専用線
    
    セキュリティ: □証明書 □暗号化 □認証 □その他( )

【テスト・品質】
─────────
11. テスト要件
    単体テスト: □自動化 □手動 □不要
    
    結合テスト: □システム内 □システム間 □E2E
    
    性能テスト: □負荷 □ストレス □不要
    
    セキュリティテスト: □脆弱性 □侵入 □不要
    
12. 品質基準
    コードカバレッジ: ____________%以上
    
    性能基準: ____________
    
    可用性: ____________%

【運用・監視】
─────────
13. 監視・アラート
    監視項目: □CPU □メモリ □ディスク □ネットワーク □アプリケーション
    
    アラート条件:
    
14. バックアップ・復旧
    バックアップ: □日次 □週次 □リアルタイム
    
    復旧時間目標(RTO): ____________
    
    復旧ポイント目標(RPO): ____________

【リリース・デプロイ】
─────────
15. リリース方式
    □ブルーグリーン □カナリア □ローリング □一括
    
16. 環境展開
    □開発 → □テスト → □ステージング → □本番
    
    各環境でのテスト内容:

────────────────────────────────
技術責任者: ____________
確認者: ____________
作成日: ____________
```

## 🚀 5. Jira 自動化設定

### 5.1 自動化ルール

#### 通知自動化
```
自動化ルール設定:
─────────────

1. 新規要求受付通知
   トリガー: 課題作成時
   条件: 課題タイプ = 変更要求
   アクション: 
   - PMに通知メール送信
   - Slackチャンネルに投稿

2. 承認期限アラート
   トリガー: スケジュール実行（日次）
   条件: ステータス = 承認待ち かつ 作成から3日経過
   アクション:
   - 承認者にリマインダー送信
   - 課題にコメント追加

3. 工数超過アラート
   トリガー: フィールド更新時
   条件: 実績工数 > 見積工数 * 1.2
   アクション:
   - PMに超過通知
   - 優先度を上げる

4. 自動ステータス更新
   トリガー: プルリクエストマージ時
   条件: 課題が開発中
   アクション:
   - ステータスをテスト中に変更
   - テスト担当者をアサイン
```

### 5.2 SLA設定

#### サービスレベル合意
```
SLA設定:
────────

変更要求種別別SLA:
1. 緊急変更要求
   - 要件整理: 4時間以内
   - 影響調査: 8時間以内  
   - 承認: 24時間以内

2. 通常変更要求
   - 要件整理: 2営業日以内
   - 影響調査: 5営業日以内
   - 承認: 10営業日以内

3. 大規模変更要求
   - 要件整理: 5営業日以内
   - 影響調査: 15営業日以内
   - 承認: 20営業日以内

SLA違反時のアクション:
- エスカレーション通知
- 管理者アサイン
- 優先度自動アップ
```

## 📊 6. レポートとメトリクス

### 6.1 管理レポート

#### 週次レポート自動生成
```
週次変更要求レポート
==================

1. サマリー情報
   - 新規受付: ___件
   - 承認: ___件  
   - 完了: ___件
   - 却下: ___件

2. SLA達成状況
   - 要件整理SLA達成率: ___%
   - 影響調査SLA達成率: ___%
   - 承認SLA達成率: ___%

3. 部署別要求状況
   [部署名] | [要求件数] | [承認率] | [平均処理時間]

4. トップ課題
   - 最も長期間滞留している要求
   - 工数超過が大きい要求
   - 緊急度の高い未対応要求

5. アクションアイテム
   - SLA違反案件への対応
   - リソース不足の解消
   - プロセス改善提案
```

### 6.2 品質メトリクス

#### KPI測定項目
```
品質メトリクス:
─────────

1. プロセス効率
   - 平均処理時間
   - 各ステップでの滞留時間
   - 差し戻し率

2. 品質指標
   - 要件変更率（開発開始後の変更）
   - テスト不具合率
   - 本番障害発生率

3. 顧客満足度
   - 要求者満足度スコア
   - 納期遵守率
   - 予算遵守率

4. 組織成熟度
   - 標準プロセス遵守率
   - ドキュメント品質スコア
   - チーム生産性指標
```

## 🎓 運用開始後の改善

### 改善サイクル
```
継続的改善プロセス:
─────────────

1. データ収集・分析（月次）
   - メトリクス測定
   - ボトルネック特定
   - トレンド分析

2. 課題抽出（四半期）
   - プロセス課題
   - ツール課題
   - スキル課題

3. 改善施策立案
   - プロセス改善
   - 自動化拡大
   - 教育・研修

4. 実施・効果測定
   - 改善実行
   - 効果測定
   - フィードバック反映
```

## 📋 チェックリスト

### 導入準備チェックリスト
```
□ Jiraプロジェクト作成
□ 課題タイプ設定
□ カスタムフィールド設定
□ ワークフロー設定
□ 権限スキーム設定
□ 通知スキーム設定
□ ダッシュボード作成
□ 自動化ルール設定
□ SLA設定
□ ヒアリングシート準備
□ チーム向け説明資料作成
□ 運用マニュアル作成
□ テスト実行
□ ユーザー研修実施
□ 運用開始
```

## 🎯 まとめ

効果的な仕様変更管理には、適切なプロセス設計とツール活用が不可欠です。Jiraを活用することで、変更要求の受付から完了まで一貫して管理でき、ヒアリングシートにより要件の漏れや曖昧さを防ぐことができます。

### 成功のポイント

1. **明確なプロセス定義**
   - ワークフローの標準化
   - 責任者・期限の明確化

2. **適切な情報収集**
   - 構造化されたヒアリング
   - 影響範囲の正確な把握

3. **可視化とコミュニケーション**
   - ダッシュボードでの進捗共有
   - ステークホルダーとの密な連携

4. **継続的改善**
   - メトリクス基づく改善
   - プロセスの定期見直し

このガイドを参考に、あなたのプロジェクトに最適な仕様変更管理体制を構築してください！
