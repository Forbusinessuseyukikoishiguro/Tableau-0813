# Tableau予測モデル作成 完全ガイド

## 📊 1. データ準備

### 必要なデータ形式
```
Date        | Sales   | Category | Region
2020-01-01  | 10000   | Product A| Tokyo
2020-02-01  | 12000   | Product A| Tokyo
2020-03-01  | 11500   | Product A| Tokyo
```

### データ要件チェックリスト
- ✅ 日付フィールドが存在する
- ✅ 数値フィールド（予測対象）が存在する
- ✅ 最低14データポイント（推奨：50以上）
- ✅ 連続した時系列データ
- ✅ 欠損値が処理済み

---

## 🚀 2. 基本的な予測モデル作成

### Step 1: ワークシート作成
1. **新しいワークシート**を作成
2. **データソース**に接続
3. **日付フィールド**を列シェルフにドラッグ
4. **数値フィールド**（売上など）を行シェルフにドラッグ

### Step 2: 線グラフ表示
```
マークタイプ: 線グラフ
X軸: 日付（連続）
Y軸: 売上（連続）
```

### Step 3: 予測線の追加
1. グラフエリアで**右クリック**
2. **「予測」→「予測の表示」**を選択
3. 予測オプションダイアログが表示される

### Step 4: 予測パラメータ設定
```
予測期間: 12ヶ月（例）
予測モデル: 自動選択
信頼区間: 95%
季節性: 自動検出
```

---

## ⚙️ 3. 高度な予測設定

### 予測モデルタイプの選択

#### 3.1 自動選択（推奨）
- Tableauが最適なモデルを自動選択
- 指数平滑法またはARIMAモデル
- 初心者に最適

#### 3.2 指数平滑法（Exponential Smoothing）
```
用途: 短期予測、トレンドと季節性がある場合
特徴: 
- 直近のデータを重視
- 計算が高速
- パラメータ調整が簡単
```

#### 3.3 線形トレンド
```
用途: 明確な線形トレンドがある場合
特徴:
- シンプルで解釈しやすい
- 長期予測に適用可能
- 季節性は考慮しない
```

### 季節性の設定

#### 自動検出
```sql
-- Tableauが自動でパターンを検出
-- 月次データ: 12ヶ月周期
-- 週次データ: 52週周期
-- 日次データ: 365日周期
```

#### 手動設定
```
月次データ: 12
四半期データ: 4
週次データ: 52
日次データ: 7 または 365
```

---

## 📈 4. 予測精度の向上

### 4.1 データ品質の改善

#### 異常値の処理
1. **Analytics**パネル → **Trend Line**
2. 異常値を特定
3. フィルターで除外または補正

#### 欠損値の補完
```sql
-- 計算フィールドで補間
IF ISNULL([Sales]) THEN 
    WINDOW_AVG([Sales], -2, 2)
ELSE 
    [Sales] 
END
```

### 4.2 特徴量の追加

#### 季節指標の作成
```sql
-- 月の季節指標
CASE MONTH([Date])
WHEN 12 THEN "Winter"
WHEN 1 THEN "Winter" 
WHEN 2 THEN "Winter"
WHEN 3 THEN "Spring"
WHEN 4 THEN "Spring"
WHEN 5 THEN "Spring"
WHEN 6 THEN "Summer"
WHEN 7 THEN "Summer"
WHEN 8 THEN "Summer"
WHEN 9 THEN "Fall"
WHEN 10 THEN "Fall"
WHEN 11 THEN "Fall"
END
```

#### トレンド分析
```sql
-- 前年同月比
(SUM([Sales]) - LOOKUP(SUM([Sales]), -12)) / LOOKUP(SUM([Sales]), -12)
```

### 4.3 バックテスト実行

#### 手動バックテスト
1. データを**2020-2022年**（学習）と**2023年**（テスト）に分割
2. 学習データで予測モデル作成
3. 2023年の実績と予測を比較

#### 精度指標の計算
```sql
-- MAPE (平均絶対パーセンテージ誤差)
AVG(ABS(([Actual] - [Forecast]) / [Actual]))

-- RMSE (二乗平均平方根誤差)  
SQRT(AVG(SQUARE([Actual] - [Forecast])))
```

---

## 🎯 5. カスタム予測モデル（R/Python統合）

### 5.1 TabPy設定（Python統合）

#### TabPy インストール
```bash
pip install tabpy
```

#### TabPy 起動
```bash
tabpy
```

#### Tableau接続設定
```
ヘルプ → 設定とパフォーマンス → 拡張機能接続の管理
サーバー: localhost
ポート: 9004
```

### 5.2 Python予測スクリプト

#### ARIMA予測
```python
# 計算フィールド
SCRIPT_REAL("
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import numpy as np

# データを時系列に変換
data = pd.Series(_arg1)
model = ARIMA(data, order=(1,1,1))
fitted_model = model.fit()

# 将来12期間を予測
forecast = fitted_model.forecast(steps=12)
return forecast.tolist()
", SUM([Sales]))
```

#### 機械学習予測
```python
# RandomForest予測
SCRIPT_REAL("
from sklearn.ensemble import RandomForestRegressor
import pandas as pd
import numpy as np

# 特徴量作成
df = pd.DataFrame({
    'sales': _arg1,
    'month': _arg2,
    'year': _arg3
})

# モデル学習
X = df[['month', 'year']].values
y = df['sales'].values

model = RandomForestRegressor(n_estimators=100)
model.fit(X[:-12], y[:-12])  # 最後の12ヶ月をテスト用に除外

# 予測
predictions = model.predict(X[-12:])
return predictions.tolist()
", SUM([Sales]), MONTH([Date]), YEAR([Date]))
```

### 5.3 Rサーバー連携

#### R設定
```r
# Rserve設定
install.packages("Rserve")
library(Rserve)
Rserve()
```

#### R予測スクリプト
```r
# 指数平滑法
SCRIPT_REAL("
library(forecast)
ts_data <- ts(.arg1, frequency=12)
model <- ets(ts_data)
forecast_result <- forecast(model, h=12)
return(as.numeric(forecast_result$mean))
", SUM([Sales]))
```

---

## 📊 6. 予測ダッシュボード作成

### 6.1 ダッシュボード構成

#### メインチャート
```
タイトル: "売上予測分析"
期間: 過去24ヶ月 + 将来12ヶ月
要素:
- 実績線（青色）
- 予測線（オレンジ色）
- 信頼区間（グレーエリア）
```

#### サブチャート
1. **季節性分析**: 月別の売上パターン
2. **精度指標**: MAPE、RMSE表示
3. **トレンド分析**: 前年同月比

### 6.2 インタラクティブ機能

#### パラメータ制御
```sql
-- 予測期間パラメータ
[予測期間パラメータ]: 1〜24ヶ月

-- 信頼区間パラメータ  
[信頼区間パラメータ]: 80%, 90%, 95%

-- 季節調整パラメータ
[季節調整]: True/False
```

#### フィルター設定
```
日付範囲: 過去3年間
商品カテゴリ: マルチ選択
地域: マルチ選択
```

### 6.3 アラート機能

#### 精度低下アラート
```sql
-- 精度が閾値を下回った場合のアラート
IF [MAPE] > 0.15 THEN "⚠️ 精度低下"
ELSEIF [MAPE] > 0.10 THEN "⚡ 注意"  
ELSE "✅ 良好"
END
```

---

## 🔧 7. 本番運用での考慮事項

### 7.1 自動更新設定

#### データソース更新
```
データソース → 抽出 → 更新スケジュール
頻度: 毎日 AM 6:00
増分更新: 有効
```

#### 予測モデル再学習
```sql
-- 毎月1日に予測モデルを再学習
IF DAY([Date]) = 1 THEN "再学習実行" ELSE "通常予測" END
```

### 7.2 パフォーマンス最適化

#### 抽出ファイル最適化
```
1. 不要な列を除外
2. 集計レベルでの抽出
3. インクリメンタル更新
4. インデックス作成
```

#### 計算最適化
```sql
-- 効率的な計算フィールド
-- 悪い例
IF [Date] >= DATE("2023-01-01") THEN [Sales] ELSE 0 END

-- 良い例  
{FIXED : MAX(IF [Date] >= DATE("2023-01-01") THEN [Sales] END)}
```

### 7.3 監視とメンテナンス

#### 定期チェック項目
- [ ] 予測精度の推移監視
- [ ] データ品質チェック
- [ ] 外れ値の検出
- [ ] モデル再学習の必要性判断

#### アラート設定
```sql
-- 予測と実績の乖離アラート
IF ABS([実績] - [予測]) / [実績] > 0.20 THEN 
    "大幅乖離発生 - 要確認"
ELSE 
    "正常範囲"
END
```

---

## 🎓 8. 実践演習

### 演習1: 基本予測モデル
1. サンプルデータで線グラフ作成
2. 予測線を追加（6ヶ月先）
3. 信頼区間を95%に設定

### 演習2: 季節性調整
1. 月次売上データで季節性分析
2. 手動で12ヶ月周期を設定
3. 季節調整前後の比較

### 演習3: 複数モデル比較
1. 指数平滑法で予測
2. 線形トレンドで予測  
3. 精度を比較してベストモデル選択

### 演習4: カスタム予測
1. TabPyでPython予測スクリプト実装
2. 機械学習モデルで予測
3. Tableau標準予測と精度比較

---

## ❓ よくある質問

### Q1: 予測精度が低い場合の対処法は？
**A1:** 
- データ期間を長くする
- 異常値を除外する
- 季節性パラメータを調整する
- 外部要因（イベント、プロモーション）を考慮する

### Q2: 複数商品の予測を一度に行うには？
**A2:**
- 商品をフィルターに設定
- 各商品別にワークシートを作成
- ダッシュボードで統合表示

### Q3: 予測結果をExcelにエクスポートするには？
**A3:**
```
ワークシート → データ → Excelにエクスポート
または
ダッシュボード → ダウンロード → クロス集計
```

### Q4: リアルタイムデータでの予測更新は？
**A4:**
- ライブ接続を使用
- データベースの自動更新
- Tableau Serverでスケジュール実行

---

## 🚀 次のステップ

1. **基本予測**をマスターする
2. **カスタム予測**（Python/R）に挑戦
3. **高度なダッシュボード**作成
4. **本番運用**での最適化

この手順で進めば、Tableauでの予測モデル作成をマスターできます！
